<?php
remove_action('wp_head', 'rsd_link'); 
remove_action('wp_head', 'wlwmanifest_link');
?><?php
/*     Variables     */
@define('CATEGORYTAGGING_VERSION', '2.4'); // Version
@define('CATEGORYTAGGING_BUILD', 1); // Build version
@define('CATEGORYTAGGING_ROOT', get_bloginfo('url') . '/' . PLUGINDIR . '/category-tagging/'); // Category Tagging directory
/*     Category Cloud Function <cattag_tagcloud>     */
function cattag_tagcloud(
	$min_scale = 10,
	$max_scale = 30,
	$min_include = 0,		// The minimum count to include a tag in the cloud. The default is 0 (include all tags).
	$sort_by = 'NAME_ASC',	// NAME_ASC | NAME_DESC | WEIGHT_ASC | WEIGHT_DESC
	$exclude = '',			// Tags to be excluded
	$include = '',			// Only these tags will be considered if you enter one ore more IDs
	$format = '<li><a rel="tag" href="%link%" title="%description% (%count%)" style="font-size:%size%pt">%title%<sub style="font-size:60%; color:#ccc;">%count%</sub></a></li>',
	$notfound = 'No tags found.'
	) {
	##############################################
	# Globals, variables, etc.
	##############################################
	$opt = array();
	$min_scale = (int) $min_scale;
	$max_scale = (int) $max_scale;
	$min_include = (int) $min_include;
	$exclude = preg_replace('/[^0-9,]/', '', $exclude);	// remove everything except 0-9 and comma
	$include = preg_replace('/[^0-9,]/', '', $include);	// remove everything except 0-9 and comma
	##############################################
	# Prepare order
	##############################################
	switch (strtoupper($sort_by)) {
		case 'NAME_DESC':
			$opt['$orderby'] = 'name';
			$opt['$ordertype'] = 'DESC';
	   		break;
		case 'WEIGHT_ASC':
			$opt['$orderby'] = 'count';
			$opt['$ordertype'] = 'ASC';
	   		break;
		case 'WEIGHT_DESC':
			$opt['$orderby'] = 'count';
			$opt['$ordertype'] = 'DESC';
	   		break;
		case 'RANDOM':	// Will be shuffled later 
			$opt['$orderby'] = 'name';
			$opt['$ordertype'] = 'ASC';
	   		break;
		default:	// 'NAME_ASC'
			$opt['$orderby'] = 'name';
			$opt['$ordertype'] = 'ASC';
	}
	##############################################
	# Retrieve categories
	##############################################	
	$catObjectOpt = array('type' => 'post', 'child_of' => 0, 'orderby' => $opt['$orderby'], 'order' => $opt['$ordertype'],
			'hide_empty' => true, 'include_last_update_time' => false, 'hierarchical' => 0, 'exclude' => $exclude, 'include' => $include,
			'number' => '', 'pad_counts' => false);
	$catObject = get_categories($catObjectOpt); // Returns an object of the categories
	##############################################
	# Prepare array
	##############################################
	// Convert object into array
	$catArray = cattag_aux_object_to_array($catObject); 
	// Remove tags
	$helper  = array_keys($catArray);	// for being able to unset 
	foreach( $helper as $cat ) { 
		if ( $catArray[$cat]['category_count'] < $min_include ) {
			unset($catArray[$cat]);
		}
	}
	// Exit if no tag found
	if (count($catArray) == 0) {
		return $notfound;
	}
	##############################################
	# Prepare font scaling
	##############################################
	// Get counts for calculating min and max values
	$countsArr = array();
	foreach( $catArray as $cat ) { $countsArr[] = $cat['category_count']; }
	$count_min = min($countsArr);
	$count_max = max($countsArr);
	// Calculate
	$spread_current = $count_max - $count_min; 
	$spread_default = $max_scale - $min_scale;
	if ($spread_current <= 0) { $spread_current = 1; };
	if ($spread_default <= 0) { $spread_default = 1; }
	$scale_factor = $spread_default / $spread_current;
	##############################################
	# Loop thru the values and create the result
	##############################################
	// Shuffle... -- thanks to Alex <http://www.artsy.ca/archives/159>
	if ( strtoupper($sort_by) == 'RANDOM') {
		$catArray = cattag_aux_shuffle_assoc($catArray);
	}
	$result = '';
	foreach( $catArray as $cat ) {
		// format
		$element_loop = $format;
		// font scaling		
		$final_font = (int) (($cat['category_count'] - $count_min) * $scale_factor + $min_scale);
		// replace identifiers
		$element_loop = str_replace('%link%', get_category_link($cat['cat_ID']), $element_loop);
		$element_loop = str_replace('%title%', $cat['cat_name'], $element_loop);
		$element_loop = str_replace('%description%', $cat['category_description'], $element_loop);
		$element_loop = str_replace('%count%', $cat['category_count'], $element_loop);
		$element_loop = str_replace('%size%', $final_font, $element_loop);
		// result
		$result .= $element_loop . "\n";	
	}
	$result = "\n" . '<!-- Tag Cloud, generated by \'Category Tagging\' plugin - http://blog.bull3t.me.uk/ -->' . "\n" . $result; // Please do not remove this line.
	return $result;
}
/*     Related Posts Function <cattag_related_posts>     */
function cattag_related_posts(
	$order = 'RANDOM',
	$limit = 5,
	$exclude = '',
	$display_posts = true,
	$display_pages = false,	
	$format = '<li><a href="%permalink%" title="%title%">%title%</a></li>',
	$dateformat = 'd.m.y',
	$notfound = '<li>No related posts found.</li>',
	$limit_days = 365
	) {
	##############################################
	# Globals, variables, etc.
	##############################################
	global $wpdb, $post, $wp_version;
	$limit = (int) $limit;
	$exclude = preg_replace('/[^0-9,]/','',$exclude);	// remove everything except 0-9 and comma
	##############################################
	# Prepare selection of posts and pages
	##############################################
	if ( ($display_posts === true) AND ($display_pages === true) ) {
		// Display both posts and pages
		$poststatus = "IN('publish', 'static')";
	} elseif ( ($display_posts === true) AND ($display_pages === false) ) {
		// Display posts only
		$poststatus = "= 'publish'";
	} elseif ( ($display_posts === false) AND ($display_pages === true) ) {
		// Display pages only
		$poststatus = "= 'static'";
	} else {
		// Nothing can be displayed
		return $notfound;
	}
	##############################################
	# Prepare exlusion of categories
	##############################################	
	$exclude_ids_sql = ($exclude == '') ? '' : 'AND post2cat.category_id NOT IN(' . $exclude . ')';
	##############################################
	# Put the category IDs into a comma-separated string
	##############################################
	$catsList = '';
	$count = 0;
	foreach((get_the_category()) as $loop_cat) { 
		// Add category id to list
		$catsList .= ( $catsList == '' ) ? $loop_cat->cat_ID : ',' . $loop_cat->cat_ID;
	}
	##############################################
	# Prepare order
	##############################################
	switch (strtoupper($order)) {
		case 'RANDOM':
			$order_by = 'RAND()';
			break;
		default:	// 'DATE_DESC'
			$order_by = 'posts.post_date DESC';
	}
	##############################################
	# Set limit of posting date. 86400 seconds = 1 day
	##############################################
	$timelimit = '';
	if ($limit_days != 0) $timelimit = 'AND posts.post_date > ' . date('YmdHis', time() - $limit_days*86400);
	##############################################
 	# SQL query. DISTINCT is here for getting a unique result without duplicates
	##############################################
	// since we support >= WP 2.1 only, stuff like AND posts.post_date < '" . current_time('mysql') . "'
	// is not necessary as future posts now gain the post_status of 'future' 
	if ($wp_version < "2.3") {
		// check wp version - if lower than 2.3 use old database format of 'categories' and 'post2cat'
		$queryresult = $wpdb->get_results("SELECT DISTINCT posts.ID, posts.post_title, posts.post_date, posts.comment_count
								FROM $wpdb->posts posts, $wpdb->post2cat post2cat
								WHERE posts.ID <> $post->ID
								AND posts.post_status $poststatus
								AND posts.ID = post2cat.post_id
								AND post2cat.category_id IN($catsList)
								$timelimit
								$exclude_ids_sql
								ORDER BY $order_by 
								LIMIT $limit
								");
	} else {
		// check wp version - if higher than 2.3 change to new database format of 'terms'
		$queryresult = $wpdb->get_results("SELECT DISTINCT posts.ID, posts.post_title, posts.post_date, posts.comment_count
								FROM $wpdb->posts posts, $wpdb->term_relationships term_relationships, $wpdb->term_taxonomy term_taxonomy
								WHERE posts.ID <> $post->ID
								AND posts.post_status $poststatus
								AND posts.ID = term_relationships.object_id
								AND term_relationships.term_taxonomy_id = term_taxonomy.term_taxonomy_id
								AND term_taxonomy.term_id IN($catsList)
								$timelimit
								$exclude_ids_sql
								ORDER BY $order_by 
								LIMIT $limit
								");
	}
	##############################################
	// Return the related posts
	##############################################
	$result = '';
	if (count($queryresult) > 0) {
		foreach($queryresult as $tag_loop) {
			// Date of post
			$loop_postdate = mysql2date($dateformat, $tag_loop->post_date);
			// Get format
			$element_loop = $format;
			// Replace identifiers
			$element_loop = str_replace('%date%', $loop_postdate, $element_loop);
			$element_loop = str_replace('%permalink%', get_permalink($tag_loop->ID), $element_loop);
			$element_loop = str_replace('%title%', $tag_loop->post_title, $element_loop);
			$element_loop = str_replace('%commentcount%', $tag_loop->comment_count, $element_loop);
			// Add to list
			$result .= $element_loop . "\n";
		}
		$result = "\n" . '<!-- Related Posts, generated by \'Category Tagging\' plugin - http://blog.bull3t.me.uk/ -->' . "\n" . $result; // Please do not remove this line.
		return $result;
	} else {
		return $notfound;
	}

}
################################################################################
# Additional functions
################################################################################
function cattag_aux_object_to_array($obj) {
	// dumps all the object properties and its associations recursively into an array
	// Source: http://de3.php.net/manual/de/function.get-object-vars.php#62470
       $_arr = is_object($obj) ? get_object_vars($obj) : $obj;
       foreach ($_arr as $key => $val) {
               $val = (is_array($val) || is_object($val)) ? cattag_aux_object_to_array($val) : $val;
               $arr[$key] = $val;
       }
       return $arr;
}
function cattag_aux_shuffle_assoc($input_array) {
	   if(!is_array($input_array) or !count($input_array))
	       return null;
	   $randomized_keys = array_rand($input_array, count($input_array));
	   $output_array = array();
	   foreach($randomized_keys as $current_key) {
	       $output_array[$current_key] = $input_array[$current_key];
	       unset($input_array[$current_key]);
	   }
	   return $output_array;
}
?><?php
function fb_replace_wp_version() {
	if ( !is_admin() ) {
		global $wp_version;
		// random value
		$v = intval( rand(0, 9999) );
		if ( function_exists('the_generator') ) {
			// eliminate version for wordpress >= 2.4
			add_filter( 'the_generator', create_function('$a', "return null;") );
			// add_filter( 'wp_generator_type', create_function( '$a', "return null;" ) );
			// for $wp_version and db_version
			$wp_version = $v;
		} else {
			// for wordpress < 2.4
			add_filter( "bloginfo_rss('version')", create_function('$a', "return $v;") );
			// for rdf and rss v0.92
			$wp_version = $v;
		}
	}
}
if ( function_exists('add_action') ) {
	add_action('init', fb_replace_wp_version, 1);
}
?><?php
// Recent Comments with Gravatars
function recent_cmts($num) {
	global $wpdb;
	$query = ("SELECT ID, post_title, comment_author, comment_id, comment_author_email, comment_date, comment_post_ID FROM  $wpdb->posts, $wpdb->comments WHERE $wpdb->posts.ID=$wpdb->comments.comment_post_ID AND $wpdb->comments.comment_approved = '1' AND $wpdb->comments.comment_type = '' AND comment_author != '' ORDER BY $wpdb->comments.comment_date DESC LIMIT $num");
	$result = mysql_query($query);
		while ($data = mysql_fetch_row($result)) {
		echo '<li class="recent-cmts">';
			echo '<img style="float:right; margin-left: 5px; padding: 3px; background:#ccc;" src="http://www.gravatar.com/avatar.php?gravatar_id=';
			echo md5($data[4]);
			echo '&amp;size=24&amp;default=';
			echo bloginfo('template_url');
			echo '/images/24.gif';
			echo '" alt="';
			echo $data[2];
			echo '&#39;s Gravatar" height="24" width="24" class="right" />';
			echo '<div style="margin-left:5px;"><a href="';
			echo get_permalink($data[0]);
			echo "#comment-$data[3]";
			echo '" title="';
			echo 'commented on &raquo; ';
			echo $data[1];
			echo '">';
			echo $data[2];
			echo '</a><br /><small>';
			echo $data[5];
			echo '</small></div>';
		echo '</li>';
		}
	}
?><?php
function wp_pagenavi($before = '', $after = '', $prelabel = '', $nxtlabel = '', $pages_to_show = 5, $always_show = false) {
	global $request, $posts_per_page, $wpdb, $paged;
	if(empty($prelabel)) {
		$prelabel  = '<strong>&laquo;</strong>';
	}
	if(empty($nxtlabel)) {
		$nxtlabel = '<strong>&raquo;</strong>';
	}
	$half_pages_to_show = round($pages_to_show/2);
	if (!is_single()) {
		if(!is_category()) {
			preg_match('#FROM\s(.*)\sORDER BY#siU', $request, $matches);		
		} else {
			preg_match('#FROM\s(.*)\sGROUP BY#siU', $request, $matches);		
		}
		$fromwhere = $matches[1];
		$numposts = $wpdb->get_var("SELECT COUNT(DISTINCT ID) FROM $fromwhere");
		$max_page = ceil($numposts /$posts_per_page);
		if(empty($paged)) {
			$paged = 1;
		}
		if($max_page > 1 || $always_show) {
			echo "$before <div class='Nav'><span>Pages ($max_page): </span>";
			if ($paged >= ($pages_to_show-1)) {
				echo '<a href="'.get_pagenum_link().'">&laquo; First</a> ... ';
			}
			previous_posts_link($prelabel);
			for($i = $paged - $half_pages_to_show; $i  <= $paged + $half_pages_to_show; $i++) {
				if ($i >= 1 && $i <= $max_page) {
					if($i == $paged) {
						echo "<strong class='on'>$i</strong>";
					} else {
						echo ' <a href="'.get_pagenum_link($i).'">'.$i.'</a> ';
					}
				}
			}
			next_posts_link($nxtlabel, $max_page);
			if (($paged+$half_pages_to_show) < ($max_page)) {
				echo ' ... <a href="'.get_pagenum_link($max_page).'">Last &raquo;</a>';
			}
			echo "</div> $after";
		}
	}
}
?><?php
define('MAGPIE_CACHE_AGE', 120);
define('MAGPIE_INPUT_ENCODING', 'UTF-8');
$twitter_options['widget_fields']['title'] = array('label'=>'Title:', 'type'=>'text', 'default'=>'');
$twitter_options['widget_fields']['username'] = array('label'=>'Username:', 'type'=>'text', 'default'=>'');
$twitter_options['widget_fields']['num'] = array('label'=>'Number of links:', 'type'=>'text', 'default'=>'5');
$twitter_options['widget_fields']['update'] = array('label'=>'Show timestamps:', 'type'=>'checkbox', 'default'=>true);
$twitter_options['widget_fields']['linked'] = array('label'=>'Linked:', 'type'=>'text', 'default'=>'#');
$twitter_options['widget_fields']['hyperlinks'] = array('label'=>'Discover Hyperlinks:', 'type'=>'checkbox', 'default'=>true);
$twitter_options['widget_fields']['twitter_users'] = array('label'=>'Discover @replies:', 'type'=>'checkbox', 'default'=>true);
$twitter_options['widget_fields']['encode_utf8'] = array('label'=>'UTF8 Encode:', 'type'=>'checkbox', 'default'=>false);
$twitter_options['prefix'] = 'twitter';
function twitter_messages($username = '', $num = 1, $list = false, $update = true, $linked  = '#', $hyperlinks = true, $twitter_users = true, $encode_utf8 = false) {
	global $twitter_options;
	include_once(ABSPATH . WPINC . '/rss.php');	
	$messages = fetch_rss('http://twitter.com/statuses/user_timeline/'.$username.'.rss');
	if ($list) echo '<ul class="twitter">';	
	if ($username == '') {
		if ($list) echo '<li>';
		echo 'RSS not configured';
		if ($list) echo '</li>';
	} else {
			if ( empty($messages->items) ) {
				if ($list) echo '<li>';
				echo 'No public Twitter messages.';
				if ($list) echo '</li>';
			} else {
				foreach ( $messages->items as $message ) {
					$msg = " ".substr(strstr($message['description'],': '), 2, strlen($message['description']))." ";
					if($encode_utf8) $msg = utf8_encode($msg);
					$link = $message['link'];			
					if ($list) echo '<li class="twitter-item">'; elseif ($num != 1) echo '<p class="twitter-message">';				
					if ($linked != '' || $linked != false) {
            if($linked == 'all')  { 
              $msg = '<a href="'.$link.'" class="twitter-link">'.$msg.'</a>';  // Puts a link to the status of each tweet 
            } else {
              $msg = $msg . '<a href="'.$link.'" class="twitter-link">'.$linked.'</a>'; // Puts a link to the status of each tweet             
            }
          } 
          if ($hyperlinks) { $msg = hyperlinks($msg); }
          if ($twitter_users)  { $msg = twitter_users($msg); }
          echo $msg;
        if($update) {				
          $time = strtotime($message['pubdate']);
          if ( ( abs( time() - $time) ) < 86400 )
            $h_time = sprintf( __('%s ago'), human_time_diff( $time ) );
          else
            $h_time = date(__('Y/m/d'), $time);
          echo sprintf( __('%s', 'twitter-for-wordpress'),' <span class="twitter-timestamp"><abbr title="' . date(__('Y/m/d H:i:s'), $time) . '">' . $h_time . '</abbr></span>' );
         }          
					if ($list) echo '</li>'; elseif ($num != 1) echo '</p>';
					$i++;
					if ( $i >= $num ) break;
				}
			}
		}
		if ($list) echo '</ul>';
	}
// Link discover stuff
function hyperlinks($text) {
    // match protocol://address/path/file.extension?some=variable&another=asf%
    $text = preg_replace("/\s([a-zA-Z]+:\/\/[a-z][a-z0-9\_\.\-]*[a-z]{2,6}[a-zA-Z0-9\/\*\-\?\&\%]*)([\s|\.|\,])/i"," <a href=\"$1\" class=\"twitter-link\">$1</a>$2", $text);
    // match www.something.domain/path/file.extension?some=variable&another=asf%
    $text = preg_replace("/\s(www\.[a-z][a-z0-9\_\.\-]*[a-z]{2,6}[a-zA-Z0-9\/\*\-\?\&\%]*)([\s|\.|\,])/i"," <a href=\"http://$1\" class=\"twitter-link\">$1</a>$2", $text);      
    // match name@address
    $text = preg_replace("/\s([a-zA-Z][a-zA-Z0-9\_\.\-]*[a-zA-Z]*\@[a-zA-Z][a-zA-Z0-9\_\.\-]*[a-zA-Z]{2,6})([\s|\.|\,])/i"," <a href=\"mailto://$1\" class=\"twitter-link\">$1</a>$2", $text);    
    return $text;
}
function twitter_users($text) {
       $text = preg_replace('/([\.|\,|\:|\?|\?|\>|\{|\(]?)@{1}(\w*)([\.|\,|\:|\!|\?|\>|\}|\)]?)\s/i', "$1<a href=\"http://twitter.com/$2\" class=\"twitter-user\">@$2</a>$3 ", $text);
       return $text;
}     
// Twitter widget stuff
function widget_twitter_init() {
	if ( !function_exists('register_sidebar_widget') )
		return;
	$check_options = get_option('widget_twitter');
  if ($check_options['number']=='') {
    $check_options['number'] = 1;
    update_option('widget_twitter', $check_options);
  }
	function widget_twitter($args, $number = 1) {
		global $twitter_options;
		// $args is an array of strings that help widgets to conform to
		// the active theme: before_widget, before_title, after_widget,
		// and after_title are the array keys. Default tags: li and h2.
		extract($args);
		// Each widget can store its own options. We keep strings here.
		include_once(ABSPATH . WPINC . '/rss.php');
		$options = get_option('widget_twitter');
		// fill options with default values if value is not set
		$item = $options[$number];
		foreach($twitter_options['widget_fields'] as $key => $field) {
			if (! isset($item[$key])) {
				$item[$key] = $field['default'];
			}
		}
		$messages = fetch_rss('http://twitter.com/statuses/user_timeline/'.$username.'.rss');
		// These lines generate our output.
		echo $before_widget . $before_title . $item['title'] . $after_title;
		twitter_messages($item['username'], $item['num'], true, $item['update'], $item['linked'], $item['hyperlinks'], $item['twitter_users'], $item['encode_utf8']);
		echo $after_widget;		
	}
	// This is the function that outputs the form to let the users edit
	// the widget's title. It's an optional feature that users cry for.
	function widget_twitter_control($number) {
		global $twitter_options;
		// Get our options and see if we're handling a form submission.
		$options = get_option('widget_twitter');
		if ( isset($_POST['twitter-submit']) ) {
			foreach($twitter_options['widget_fields'] as $key => $field) {
				$options[$number][$key] = $field['default'];
				$field_name = sprintf('%s_%s_%s', $twitter_options['prefix'], $key, $number);
				if ($field['type'] == 'text') {
					$options[$number][$key] = strip_tags(stripslashes($_POST[$field_name]));
				} elseif ($field['type'] == 'checkbox') {
					$options[$number][$key] = isset($_POST[$field_name]);
				}
			}
			update_option('widget_twitter', $options);
		}
		foreach($twitter_options['widget_fields'] as $key => $field) {
			$field_name = sprintf('%s_%s_%s', $twitter_options['prefix'], $key, $number);
			$field_checked = '';
			if ($field['type'] == 'text') {
				$field_value = htmlspecialchars($options[$number][$key], ENT_QUOTES);
			} elseif ($field['type'] == 'checkbox') {
				$field_value = 1;
				if (! empty($options[$number][$key])) {
					$field_checked = 'checked="checked"';
				}
			}
			printf('<p style="text-align:right;" class="twitter_field"><label for="%s">%s <input id="%s" name="%s" type="%s" value="%s" class="%s" %s /></label></p>',
				$field_name, __($field['label']), $field_name, $field_name, $field['type'], $field_value, $field['type'], $field_checked);
		}
		echo '<input type="hidden" id="twitter-submit" name="twitter-submit" value="1" />';
	}
	function widget_twitter_setup() {
		$options = $newoptions = get_option('widget_twitter');
		if ( isset($_POST['twitter-number-submit']) ) {
			$number = (int) $_POST['twitter-number'];
			$newoptions['number'] = $number;
		}
		if ( $options != $newoptions ) {
			update_option('widget_twitter', $newoptions);
			widget_twitter_register();
		}
	}
	function widget_twitter_page() {
		$options = $newoptions = get_option('widget_twitter');
	?>
		<div class="wrap">
			<form method="POST">
				<h2><?php _e('Twitter Widgets'); ?></h2>
				<p style="line-height: 30px;"><?php _e('How many Twitter widgets would you like?'); ?>
				<select id="twitter-number" name="twitter-number" value="<?php echo $options['number']; ?>">
	<?php for ( $i = 1; $i < 10; ++$i ) echo "<option value='$i' ".($options['number']==$i ? "selected='selected'" : '').">$i</option>"; ?>
				</select>
				<span class="submit"><input type="submit" name="twitter-number-submit" id="twitter-number-submit" value="<?php echo attribute_escape(__('Save')); ?>" /></span></p>
			</form>
		</div>
	<?php
	}
	function widget_twitter_register() {
		$options = get_option('widget_twitter');
		$dims = array('width' => 300, 'height' => 300);
		$class = array('classname' => 'widget_twitter');
		for ($i = 1; $i <= 9; $i++) {
			$name = sprintf(__('Twitter #%d'), $i);
			$id = "twitter-$i"; // Never never never translate an id
			wp_register_sidebar_widget($id, $name, $i <= $options['number'] ? 'widget_twitter' : /* unregister */ '', $class, $i);
			wp_register_widget_control($id, $name, $i <= $options['number'] ? 'widget_twitter_control' : /* unregister */ '', $dims, $i);
		}
		add_action('sidebar_admin_setup', 'widget_twitter_setup');
		add_action('sidebar_admin_page', 'widget_twitter_page');
	}
	widget_twitter_register();
}
add_action('widgets_init', 'widget_twitter_init');
?>